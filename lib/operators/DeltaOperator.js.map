{"version":3,"sources":["../../src/operators/DeltaOperator.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;IAEa,a,WAAA,a;AACT,2BAAY,KAAZ,EAAmB,SAAnB,EAA8B;AAAA;;AAC1B,aAAK,KAAL,GAAa,KAAb;AACA,aAAK,SAAL,GAAiB,SAAjB;AACH;;;;6BACI,U,EAAY,M,EAAQ;AACrB,mBAAO,OAAO,UAAP,CAAkB,IAAI,eAAJ,CAAoB,UAApB,EAAgC,KAAK,KAArC,EAA4C,KAAK,SAAjD,CAAlB,CAAP;AACH;;;;;;IAGQ,e,WAAA,e;;;AACT,6BAAY,UAAZ,EAAwB,KAAxB,EAA+B,SAA/B,EAA0C;AAAA;;AAAA,uGAChC,UADgC;;AAEtC,cAAK,IAAL,GAAY,KAAZ;AACA,cAAK,IAAL,GAAY,UAAU,GAAV,EAAZ;AACA,cAAK,SAAL,GAAiB,SAAjB;AAJsC;AAKzC;;;;8BACK,I,EAAM;AAAA,gBAEA,IAFA,GAE0B,IAF1B,CAEA,IAFA;AAAA,gBAEM,IAFN,GAE0B,IAF1B,CAEM,IAFN;AAAA,gBAEY,SAFZ,GAE0B,IAF1B,CAEY,SAFZ;;;AAIR,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,IAAL,GAAY,UAAU,GAAV,EAAZ;AACA,gBAAM,WAAW,KAAK,IAAL,GAAY,IAA7B;;AAEA,gBAAI,IAAJ,EAAU;AAAA,oBAEE,OAFF,GAGiC,IAHjC,CAEE,OAFF;AAAA,oBAEW,OAFX,GAGiC,IAHjC,CAEW,OAFX;AAAA,oBAGS,KAHT,GAGiC,IAHjC,CAGE,KAHF;AAAA,oBAGuB,KAHvB,GAGiC,IAHjC,CAGgB,KAHhB;AAAA,oBAIS,KAJT,GAIiC,IAJjC,CAIE,KAJF;AAAA,oBAIuB,KAJvB,GAIiC,IAJjC,CAIgB,KAJhB;;;AAMN,oBAAM,MAAM,UAAU,GAAV,EAAZ;AACA,oBAAM,SAAS,QAAQ,KAAvB;AACA,oBAAM,SAAS,QAAQ,KAAvB;AACA,oBAAM,SAAS,SAAS,KAAK,MAA7B;AACA,oBAAM,SAAS,SAAS,KAAK,MAA7B;AACA,oBAAM,YAAY,KAAK,KAAL,CAAW,SAAS,QAApB,EAA8B,SAAS,QAAvC,CAAlB;AACA,oBAAM,YAAY,KAAK,GAAL,CACd,KAAK,IAAL,CAAU,KAAK,GAAL,CAAS,KAAT,EAAgB,CAAhB,IAAqB,KAAK,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAA/B,IACA,KAAK,IAAL,CAAU,KAAK,GAAL,CAAS,KAAT,EAAgB,CAAhB,IAAqB,KAAK,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAA/B,CAFc,CAAlB;;AAKA,qBAAK,MAAL,GAAc,MAAd;AACA,qBAAK,MAAL,GAAc,MAAd;AACA,qBAAK,MAAL,GAAc,MAAd;AACA,qBAAK,MAAL,GAAc,MAAd;AACA,qBAAK,OAAL,GAAe,OAAf;AACA,qBAAK,OAAL,GAAe,OAAf;;AAEA,qBAAK,IAAL,GAAY,GAAZ;AACA,qBAAK,QAAL,GAAgB,QAAhB;AACA,qBAAK,SAAL,GAAiB,SAAjB;AACA,qBAAK,SAAL,GAAiB,SAAjB;AACH,aA5BD,MA4BO;AACH,qBAAK,IAAL,GAAY,KAAK,IAAjB;AACA,qBAAK,QAAL,GAAgB,QAAhB;AACH;;AAED,6FAAY,IAAZ;AACH","file":"DeltaOperator.js","sourcesContent":["import { Subscriber } from 'rxjs';\n\nexport class DeltaOperator {\n    constructor(point, scheduler) {\n        this.point = point;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source._subscribe(new DeltaSubscriber(subscriber, this.point, this.scheduler));\n    }\n}\n\nexport class DeltaSubscriber extends Subscriber {\n    constructor(subscriber, point, scheduler) {\n        super(subscriber);\n        this.prev = point;\n        this.time = scheduler.now();\n        this.scheduler = scheduler;\n    }\n    _next(curr) {\n\n        const { time, prev, scheduler } = this;\n\n        this.prev = curr;\n        this.time = scheduler.now();\n        const interval = this.time - time;\n\n        if (prev) {\n\n            const { originX, originY,\n                    pageX: prevX, pageY: prevY } = prev;\n            const { pageX: currX, pageY: currY } = curr;\n\n            const now = scheduler.now();\n            const deltaX = currX - prevX;\n            const deltaY = currY - prevY;\n            const totalX = deltaX + prev.totalX;\n            const totalY = deltaY + prev.totalY;\n            const direction = Math.atan2(deltaY / interval, deltaX / interval);\n            const magnitude = Math.abs(\n                Math.sqrt(Math.pow(currX, 2) + Math.pow(currY, 2)) -\n                Math.sqrt(Math.pow(prevX, 2) + Math.pow(prevY, 2))\n            );\n\n            curr.deltaX = deltaX;\n            curr.deltaY = deltaY;\n            curr.totalX = totalX;\n            curr.totalY = totalY;\n            curr.originX = originX;\n            curr.originY = originY;\n\n            curr.time = now;\n            curr.interval = interval;\n            curr.magnitude = magnitude;\n            curr.direction = direction;\n        } else {\n            curr.time = this.time;\n            curr.interval = interval;\n        }\n\n        super._next(curr);\n    }\n}\n"]}