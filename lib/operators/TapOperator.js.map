{"version":3,"sources":["../../src/operators/TapOperator.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;;;IAEa,W,WAAA,W;AACT,yBAAY,OAAZ,EAAqB,MAArB,EAA6B,QAA7B,EAAuC;AAAA;;AACnC,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,QAAL,GAAgB,QAAhB;AACH;;;;6BACI,U,EAAY,M,EAAQ;AACrB,mBAAO,OAAO,UAAP,CAAkB,IAAI,aAAJ,CAAkB,UAAlB,EACkB,KAAK,OADvB,EAEkB,KAAK,MAFvB,EAGkB,KAAK,QAHvB,CAAlB,CAAP;AAIH;;;;;;IAGQ,a,WAAA,a;;;AACT,2BAAY,WAAZ,EAAyB,OAAzB,EAAkC,MAAlC,EAA0C,QAA1C,EAAoD;AAAA;;AAAA,qGAC1C,WAD0C;;AAEhD,cAAK,OAAL,GAAe,OAAf;AACA,cAAK,MAAL,GAAc,MAAd;AACA,cAAK,QAAL,GAAgB,QAAhB;AAJgD;AAKnD;;;;8BACK,M,EAAQ;AAAA,gBAEF,OAFE,GAE4B,IAF5B,CAEF,OAFE;AAAA,gBAEO,MAFP,GAE4B,IAF5B,CAEO,MAFP;AAAA,gBAEe,QAFf,GAE4B,IAF5B,CAEe,QAFf;AAAA,gBAGF,eAHE,GAGkB,QAHlB,CAGF,eAHE;AAAA,gBAKF,GALE,GAKM,MALN,CAKF,GALE;;AAMV,gBAAM,UAAU,QAAQ,OAAxB;AACA,gBAAM,cAAc,UAAU,IAAV,GAAiB,uBAAS,GAAT,CAArC;;AAEA,gBAAM,OAAO,UACT,SAAS,GAAT,CAAa,eAAb,CADS,GAET,SAAS,GAAT,CAAa,eAAb,EAA8B,MAA9B,CAAqC,WAArC,CAFJ;;AAIA,gBAAM,UAAU,UACZ,SAAS,MAAT,CAAgB,eAAhB,CADY,GAEZ,SAAS,MAAT,CAAgB,eAAhB,EAAiC,MAAjC,CAAwC,WAAxC,CAFJ;;AAIA,2FAAY,SAAS,GAAT,CAAa,MAAb,EAAqB,OAArB,EAA8B,MAA9B,EAAsC,IAAtC,EAA4C,OAA5C,CAAZ;AACH","file":"TapOperator.js","sourcesContent":["import { selectId } from '../support';\nimport { Observable, Subscriber } from 'rxjs';\n\nexport class TapOperator {\n    constructor(timeout, radius, Gestures) {\n        this.timeout = timeout;\n        this.radius = radius;\n        this.Gestures = Gestures;\n    }\n    call(subscriber, source) {\n        return source._subscribe(new TapSubscriber(subscriber,\n                                                   this.timeout,\n                                                   this.radius,\n                                                   this.Gestures));\n    }\n}\n\nexport class TapSubscriber extends Subscriber {\n    constructor(destination, timeout, radius, Gestures) {\n        super(destination);\n        this.timeout = timeout;\n        this.radius = radius;\n        this.Gestures = Gestures;\n    }\n    _next(starts) {\n\n        const { timeout, radius, Gestures } = this;\n        const { topLevelElement } = Gestures;\n\n        const { key } = starts;\n        const isMouse = key === 'mouse';\n        const selectPoint = isMouse ? null : selectId(key);\n\n        const ends = isMouse ?\n            Gestures.end(topLevelElement) :\n            Gestures.end(topLevelElement).filter(selectPoint);\n\n        const cancels = isMouse ?\n            Gestures.cancel(topLevelElement) :\n            Gestures.cancel(topLevelElement).filter(selectPoint);\n\n        super._next(Gestures.tap(starts, timeout, radius, ends, cancels));\n    }\n}\n"]}