{"version":3,"sources":["../../src/operators/MultitouchOperator.js"],"names":[],"mappings":"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","file":"MultitouchOperator.js","sourcesContent":["import { Point } from '../support';\nimport { MergeAllSubscriber } from 'rxjs/operator/mergeAll';\n\nexport class MultitouchOperator {\n    call(subscriber, source) {\n        return source._subscribe(new MultitouchSubscriber(subscriber));\n    }\n}\n\nconst degToRad = Math.PI / 180;\n\nexport class MultitouchSubscriber extends MergeAllSubscriber {\n    constructor(destination) {\n        super(destination, Number.POSITIVE_INFINITY);\n        this.index = 0;\n    }\n    _next(event) {\n\n        if (event instanceof Point) {\n            return this.notifyNext(event, event, ++this.index, 0);\n        }\n\n        const index = this.index++;\n        const { type, button, buttons,\n                currentTarget: target } = event;\n        const isTouch = (type[0] === 't');\n\n        if (!isTouch) {\n            const { pageX, pageY, clientX, clientY, screenX, screenY } = event;\n            this.notifyNext(event, {\n                button, buttons,\n                type, event, touch: event, target,\n                index, pageX, pageY, screenX, screenY,\n                clientX, clientY, radiusX: 1, radiusY: 1,\n                identifier: 'mouse', rotationAngle: 0\n            }, index, 0);\n        } else {\n            let touchesIndex = -1;\n            const touches = event.changedTouches;\n            const touchesLen = touches.length;\n            while (++touchesIndex < touchesLen) {\n                const touch = touches[touchesIndex];\n                const { identifier, pageX, pageY,\n                        screenX, screenY, clientX, clientY,\n                        radiusX = 1, radiusY = 1, rotationAngle = 0 } = touch;\n                this.notifyNext(event, {\n                    button, buttons: 0,\n                    type, event, touch, target, identifier,\n                    index, pageX, pageY, screenX, screenY,\n                    clientX, clientY, radiusX, radiusY,\n                    rotationAngle: rotationAngle * degToRad\n                }, index, touchesIndex);\n            }\n        }\n    }\n}\n\n/*\n// const changes = !isTouch ? [event] : Array.from(event.changedTouches);\n// const targets = !isTouch ? changes : reduceTouches(event.targetTouches);\n// const touches = !isTouch ? targets : changes.filter((touch) => (\n//     targets.hasOwnProperty(touch.identifier)\n// ));\nfunction reduceTouches(touches) {\n    return Array.from(touches).reduce((touches, touch) => ({\n        ...touches, [touch.identifier]: touch\n    }), {})\n}\n*/\n"]}