{"version":3,"sources":["../../src/operators/MultitouchOperator.js"],"names":["MultitouchOperator","subscriber","source","subscribe","MultitouchSubscriber","degToRad","Math","PI","destination","index","event","notifyNext","type","button","buttons","target","currentTarget","isTouch","pageX","pageY","clientX","clientY","screenX","screenY","touch","radiusX","radiusY","identifier","rotationAngle","touchesIndex","touches","changedTouches","touchesLen","length"],"mappings":"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","file":"MultitouchOperator.js","sourcesContent":["import { Point } from '../support';\nimport { identity } from 'rxjs/util/identity';\nimport { MergeMapSubscriber } from 'rxjs/operators/mergeMap';\n\nexport class MultitouchOperator {\n    call(subscriber, source) {\n        return source.subscribe(new MultitouchSubscriber(subscriber));\n    }\n}\n\nconst degToRad = Math.PI / 180;\n\nexport class MultitouchSubscriber extends MergeMapSubscriber {\n    constructor(destination) {\n        super(destination, identity);\n        this.index = 0;\n    }\n    _next(event) {\n\n        if (event instanceof Point) {\n            return this.notifyNext(event, event, ++this.index, 0);\n        }\n\n        const index = this.index++;\n        const { type, button, buttons,\n                currentTarget: target } = event;\n        const isTouch = (type[0] === 't');\n\n        if (!isTouch) {\n            const { pageX, pageY, clientX, clientY, screenX, screenY } = event;\n            this.notifyNext(event, {\n                button, buttons,\n                type, event, touch: event, target,\n                index, pageX, pageY, screenX, screenY,\n                clientX, clientY, radiusX: 1, radiusY: 1,\n                identifier: 'mouse', rotationAngle: 0\n            }, index, 0);\n        } else {\n            let touchesIndex = -1;\n            const touches = event.changedTouches;\n            const touchesLen = touches.length;\n            while (++touchesIndex < touchesLen) {\n                const touch = touches[touchesIndex];\n                const { identifier, pageX, pageY,\n                        screenX, screenY, clientX, clientY,\n                        radiusX = 1, radiusY = 1, rotationAngle = 0 } = touch;\n                this.notifyNext(event, {\n                    button, buttons: 0,\n                    type, event, touch, target, identifier,\n                    index, pageX, pageY, screenX, screenY,\n                    clientX, clientY, radiusX, radiusY,\n                    rotationAngle: rotationAngle * degToRad\n                }, index, touchesIndex);\n            }\n        }\n    }\n}\n\n/*\n// const changes = !isTouch ? [event] : Array.from(event.changedTouches);\n// const targets = !isTouch ? changes : reduceTouches(event.targetTouches);\n// const touches = !isTouch ? targets : changes.filter((touch) => (\n//     targets.hasOwnProperty(touch.identifier)\n// ));\nfunction reduceTouches(touches) {\n    return Array.from(touches).reduce((touches, touch) => ({\n        ...touches, [touch.identifier]: touch\n    }), {})\n}\n*/\n"]}