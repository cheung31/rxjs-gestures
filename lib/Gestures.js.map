{"version":3,"sources":["../src/Gestures.js"],"names":["install","mouseEvents","start","end","move","cancel","wheel","mousewheel","touchEvents","identity","x","getIdentifier","identifier","getReplaySubject1","getTopLevelElement","window","document","global","topLevelElement","wrapStaticObservableMethods","operator","observable","InstalledGestures","Gestures","target","events","source","length","fromEvent","event","merge","map","lift","immediate","coefficientOfFriction","speedLimit","scheduler","animationFrame","radiusX","radiusY","y","filter","movementXTotal","movementYTotal","origin","Gestures_","constructor","inputs","groupBy","take","timeout","radius","ends","cancels","arguments","startsById","preventDefault","normalize","mergeMap","inside","timeoutWith","empty","takeUntil","delay","moves","timer","withLatestFrom","startWith","i","outside","Observable","createStaticWrapper","staticMethodName","bindCallback","args","bindNodeCallback"],"mappings":"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","file":"Gestures.js","sourcesContent":["import $$observable from 'symbol-observable';\nimport { epsilon, selectId } from './support';\nimport { Scheduler, Observable, ReplaySubject } from 'rxjs';\nimport { TapOperator, PanOperator,\n         NormalizeOperator, PressOperator,\n         MultitouchOperator, DecelerateOperator,\n         PreventDefaultOperator, StopPropagationOperator } from './operators';\n\nconst mouseEvents = {\n    start: 'mousedown', end: 'mouseup',\n    move: 'mousemove', cancel: 'mouseleave',\n    wheel: 'wheel', mousewheel: 'mousewheel',\n};\n\nconst touchEvents = {\n    start: 'touchstart', end: 'touchend',\n    move: 'touchmove', cancel: 'touchcancel'\n};\n\nfunction identity(x){ return x; }\nfunction getIdentifier({ identifier }){ return identifier || 'mouse'; }\nfunction getReplaySubject1() { return new ReplaySubject(1); }\nfunction getTopLevelElement() {\n    return typeof window !== 'undefined' ?\n        window : typeof document !== 'undefined' ?\n            document : global;\n}\n\nexport function install(topLevelElement = getTopLevelElement()) {\n    return wrapStaticObservableMethods(\n        Observable,\n        class InstalledGestures extends Gestures {\n            static topLevelElement = topLevelElement;\n            lift(operator) {\n                const observable = new InstalledGestures(this);\n                observable.operator = operator;\n                return observable;\n            }\n        });\n}\n\nclass Gestures extends Observable {\n    static topLevelElement = getTopLevelElement();\n    constructor(target, ...events) {\n        if (!target || typeof target === 'function' || typeof target !== 'object') {\n            super(target);\n        } else if (typeof target[$$observable] === 'function') {\n            super();\n            this.source = target[$$observable]();\n        } else if (events.length === 1) {\n            super();\n            this.source = Observable.fromEvent(target, event[0]);\n        } else {\n            super();\n            this.source = Observable.merge(...events.map((event) =>\n                Observable.fromEvent(target, event)\n            ));\n        }\n    }\n    lift(operator) {\n        const observable = new Gestures(this);\n        observable.operator = operator;\n        return observable;\n    }\n    preventDefault() {\n        return this.lift(new PreventDefaultOperator());\n    }\n    stopPropagation(immediate = false) {\n        return this.lift(new StopPropagationOperator(immediate));\n    }\n    decelerate(coefficientOfFriction = 25, speedLimit = 200, scheduler = Scheduler.animationFrame) {\n        return this.lift(new DecelerateOperator(coefficientOfFriction, speedLimit, scheduler));\n    }\n    inside({ x: radiusX, y: radiusY }) {\n        return this.filter(({ movementXTotal, movementYTotal }) => !epsilon(\n            radiusX, radiusY, movementXTotal, movementYTotal\n        ));\n    }\n    outside({ x: radiusX, y: radiusY }) {\n        return this.filter(({ movementXTotal, movementYTotal }) => epsilon(\n            radiusX, radiusY, movementXTotal, movementYTotal\n        ));\n    }\n    normalize(origin, Gestures_ = this.constructor, scheduler = Scheduler.animationFrame) {\n        return this.lift(new NormalizeOperator(origin, Gestures_, scheduler));\n    }\n    static startsById(target = this.topLevelElement, inputs = 1) {\n        return this\n            .start(target)\n            .groupBy(getIdentifier, null, null, getReplaySubject1)\n            .take(inputs);\n    }\n    static start(target = this.topLevelElement) {\n        return new this(target, mouseEvents.start, touchEvents.start).lift(new MultitouchOperator());\n    }\n    static move(target = this.topLevelElement) {\n        return new this(target, mouseEvents.move, touchEvents.move).lift(new MultitouchOperator());\n    }\n    static end(target = this.topLevelElement) {\n        return new this(target, mouseEvents.end, touchEvents.end).lift(new MultitouchOperator());\n    }\n    static cancel(target = this.topLevelElement) {\n        return new this(target, mouseEvents.cancel, touchEvents.cancel).lift(new MultitouchOperator());\n    }\n    static tap(target = this.topLevelElement, {\n                   inputs = 1, timeout = 250,\n                   radius = { x: 10, y: 10 }\n               } = {}, ends, cancels) {\n\n        if (arguments.length <= 2) {\n            return (this\n                .startsById(target, inputs)\n                .lift(new TapOperator(timeout, radius, this))\n            );\n        }\n\n        ends = (ends instanceof this) && ends || new this(ends);\n        target = (target instanceof this) && target || new this(target);\n\n        return target\n            .preventDefault()\n            .normalize(null, this)\n            .mergeMap((start) => ends\n                .preventDefault()\n                .normalize(start, this)\n                .inside(radius)\n                .timeoutWith(timeout, Observable.empty())\n            )\n            .takeUntil(cancels)\n            .take(1);\n    }\n    static press(target = this.topLevelElement, {\n                     inputs = 1, delay = 0,\n                     radius = { x: 10, y: 10 }\n                 } = {}, moves, ends, cancels) {\n        if (arguments.length <= 2) {\n            return (this\n                .startsById(target, inputs)\n                .lift(new PressOperator(delay, radius, this))\n            );\n        }\n\n        target = (target instanceof this) && target || new this(target);\n\n        if (delay <= 0) {\n            return target\n                .normalize(null, this)\n                .take(1);\n        }\n\n        moves = (moves instanceof this) && moves || new this(moves);\n\n        return target\n            .preventDefault()\n            .normalize(null, this)\n            .mergeMap((start) => Observable\n                .timer(delay)\n                .withLatestFrom(moves\n                    .normalize(start, this)\n                    .startWith(start), (i, move) => move)\n                .takeUntil(ends\n                    .merge(cancels)\n                    .merge(moves\n                        .normalize(start, this)\n                        .outside(radius)))\n            )\n            .take(1);\n    }\n    static pan(target = this.topLevelElement, {\n                   inputs = 1, delay = 0,\n                   radius = { x: 10, y: 10 },\n               } = {}, moves, ends, cancels) {\n        if (arguments.length <= 2) {\n            return this\n                .startsById(target, inputs)\n                .lift(new PanOperator(delay, radius, this))\n        }\n        ends = (ends instanceof this) && ends || new this(ends);\n        moves = (moves instanceof this) && moves || new this(moves);\n        target = (target instanceof this) && target || new this(target);\n        return target\n            .preventDefault()\n            .mergeMap((start) => moves\n                .merge(ends)\n                .normalize(start, this)\n                .startWith(start))\n            .takeUntil(ends.merge(cancels));\n    }\n}\n\nGestures = wrapStaticObservableMethods(Observable, Gestures);\n\nexport { Gestures };\nexport default Gestures;\n\nfunction wrapStaticObservableMethods(Observable, Gestures) {\n    function createStaticWrapper(staticMethodName) {\n        return function(...args) {\n            return new Gestures(Observable[staticMethodName](...args));\n        }\n    }\n    for (const staticMethodName in Observable) {\n        Gestures[staticMethodName] = createStaticWrapper(staticMethodName);\n    }\n    Gestures.bindCallback = (...args) => (...args2) => new Gestures(Observable.bindCallback(...args)(...args2));\n    Gestures.bindNodeCallback = (...args) => (...args2) => new Gestures(Observable.bindNodeCallback(...args)(...args2));\n    return Gestures;\n}\n"]}